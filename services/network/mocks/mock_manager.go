// Code generated by MockGen. DO NOT EDIT.
// Source: services/network/manager.go

// Package mock_network is a generated GoMock package.
package mock_network

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBotManager is a mock of BotManager interface.
type MockBotManager struct {
	ctrl     *gomock.Controller
	recorder *MockBotManagerMockRecorder
}

// MockBotManagerMockRecorder is the mock recorder for MockBotManager.
type MockBotManagerMockRecorder struct {
	mock *MockBotManager
}

// NewMockBotManager creates a new mock instance.
func NewMockBotManager(ctrl *gomock.Controller) *MockBotManager {
	mock := &MockBotManager{ctrl: ctrl}
	mock.recorder = &MockBotManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotManager) EXPECT() *MockBotManagerMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockBotManager) Init(defaultGateway *net.IP, allSubnets []*net.IPNet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", defaultGateway, allSubnets)
}

// Init indicates an expected call of Init.
func (mr *MockBotManagerMockRecorder) Init(defaultGateway, allSubnets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockBotManager)(nil).Init), defaultGateway, allSubnets)
}

// SetBotAdminRules mocks base method.
func (m *MockBotManager) SetBotAdminRules(containerName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBotAdminRules", containerName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBotAdminRules indicates an expected call of SetBotAdminRules.
func (mr *MockBotManagerMockRecorder) SetBotAdminRules(containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBotAdminRules", reflect.TypeOf((*MockBotManager)(nil).SetBotAdminRules), containerName)
}
